{"version":3,"sources":["webpack:///./index.js"],"names":["makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":"0HAkDMA,EAAkB,SAACC,GAErB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC1B,IAP4BC,EAAKC,EAO3BC,GAPsBF,EAOY,IAPPC,EAOY,IAN3CE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAQpDM,YAAW,WACUH,KAAKE,SAAW,GAGjCP,EAAQF,EAAYW,GAAIL,GAExBH,EAAOH,EAAYW,MAEpBL,OAKCM,EAAa,SAACD,EAAIE,GACtBC,QAAQC,IAAR,eAA2BJ,EAA3B,iBAA8CE,EAA9C,OAGIG,EAAW,SAAAL,GACfG,QAAQG,KAAR,gCAA6CN,EAA7C,8BAGFZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,K","file":"main.2b636b2b2a0a4d366fe4.js","sourcesContent":["\r\n//============ Задание 1 ============\r\n// const delay = ms => {\r\n//   // Твой код\r\n//     return new Promise((resolve) => {\r\n//        setTimeout(() => {\r\n//     resolve(ms);\r\n//   }, ms);\r\n//    })\r\n// };\r\n\r\n// const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n//============ Задание 2 ============\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n\r\n//     return new Promise((resolve) => {\r\n//           const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//         );\r\n//         resolve(updatedUsers);\r\n\r\n//     })\r\n\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n//============ Задание 3 ============\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n       const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      resolve(transaction.id, delay);\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);   \r\n    })\r\n\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}